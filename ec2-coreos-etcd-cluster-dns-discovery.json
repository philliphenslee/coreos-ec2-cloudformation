{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template that creates a CoreOS service cluster of three servers, and separate Auto Scaling group for worker instances. Creates cluster Security Group and DNS records for service discovery.",
  "Parameters": {
    "AllowSSHFrom": {
      "Description": "The net block (CIDR) that SSH is available to.",
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "EC2 HVM instance type (m3.medium, etc).",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "cc2.8xlarge",
        "cr1.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "t2.micro",
        "t2.small",
        "t2.medium"
      ],
      "ConstraintDescription": "Must be a valid EC2 HVM instance type."
    },
    "DNSHostedZone": {
      "Description": "The name of the Route53 private DNS zone (example.com).",
      "Type": "String",
      "Default": "example.com"
    },
    "KeyPair": {
      "Description": "The key pair to allow SSH access...",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "Server1Name": {
      "Description": "The name of the first server in the cluster",
      "Type": "String",
      "Default": "etcd1"
    },
    "Server1IP": {
      "Description": "The static IP address of server one.",
      "Type": "String"
    },
    "Server1Subnet": {
      "Description": "The designated subnet id for server one.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Server2Name": {
      "Description": "The name of the second server in the cluster",
      "Type": "String",
      "Default": "etcd2"
    },
    "Server2IP": {
      "Description": "The static IP address of server two.",
      "Type": "String"
    },
    "Server2Subnet": {
      "Description": "The designated subnet id for server two.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Server3Name": {
      "Description": "The name of the third server in the cluster",
      "Type": "String",
      "Default": "etcd3"
    },
    "Server3IP": {
      "Description": "The static IP address of server three.",
      "Type": "String"
    },
    "Server3Subnet": {
      "Description": "The designated subnet id for server three.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "WorkerCount": {
      "Description": "The initial number of worker or minion instances",
      "Type": "String",
      "Default": "3"
    },
    "VpcId": {
      "Description": "The VPC Id",
      "Type": "AWS::EC2::VPC::Id"
    }
  },
  "Mappings": {
    "RegionMap": {
      "eu-central-1": {
        "AMI": "ami-fdd4c791"
      },
      "ap-northeast-1": {
        "AMI": "ami-84e0c7ea"
      },
      "sa-east-1": {
        "AMI": "ami-154af179"
      },
      "ap-southeast-2": {
        "AMI": "ami-f35b0590"
      },
      "ap-southeast-1": {
        "AMI": "ami-da67a0b9"
      },
      "us-east-1": {
        "AMI": "ami-37bdc15d"
      },
      "us-west-2": {
        "AMI": "ami-00ebfc61"
      },
      "us-west-1": {
        "AMI": "ami-27553a47"
      },
      "eu-west-1": {
        "AMI": "ami-55d20b26"
      }
    }
  },
  "Resources": {
    "Server1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "PrivateIpAddress": {
          "Ref": "Server1IP"
        },
        "SubnetId": {
          "Ref": "Server1Subnet"
        },
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "CoreOSClusterSG",
              "GroupId"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Server1Name"
                  },
                  ".",
                  {
                    "Ref": "DNSHostedZone"
                  }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n\n",
                "coreos:\n",
                "  etcd2:\n",
                "    name: ",
                {
                  "Ref": "Server1Name"
                },
                "\n",
                "    discovery-srv: ",
                {
                  "Ref": "DNSHostedZone"
                },
                "\n",
                "    advertise-client-urls: http://",
                {
                  "Ref": "Server1Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2379\n",
                "    initial-advertise-peer-urls: http://",
                {
                  "Ref": "Server1Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2380\n",
                "    initial-cluster-token: ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n    initial-cluster-state: new\n",
                "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
                "    listen-peer-urls: http://",
                {
                  "Ref": "Server1Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2380\n",
                "  fleet:\n",
                "    metadata: \"role=services\"\n",
                "    etcd_servers: http://127.0.0.1:2379\n",
                "  units:\n",
                "    - name: etcd2.service\n",
                "      command: start\n",
                "    - name: fleet.service\n",
                "      command: start\n"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "etcdSRVRecord",
        "Server1ARecord",
        "Server2ARecord",
        "Server3ARecord"
      ]
    },
    "Server2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "PrivateIpAddress": {
          "Ref": "Server2IP"
        },
        "SubnetId": {
          "Ref": "Server2Subnet"
        },
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "CoreOSClusterSG",
              "GroupId"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Server2Name"
                  },
                  ".",
                  {
                    "Ref": "DNSHostedZone"
                  }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n\n",
                "coreos:\n",
                "  etcd2:\n",
                "    name: ",
                {
                  "Ref": "Server2Name"
                },
                "\n",
                "    discovery-srv: ",
                {
                  "Ref": "DNSHostedZone"
                },
                "\n",
                "    advertise-client-urls: http://",
                {
                  "Ref": "Server2Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2379\n",
                "    initial-cluster-token: ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n    initial-cluster-state: new\n",
                "    initial-advertise-peer-urls: http://",
                {
                  "Ref": "Server2Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2380\n",
                "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
                "    listen-peer-urls: http://",
                {
                  "Ref": "Server2Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2380\n",
                "  fleet:\n",
                "    metadata: \"role=services\"\n",
                "    etcd_servers: http://127.0.0.1:2379\n",
                "  units:\n",
                "    - name: etcd2.service\n",
                "      command: start\n",
                "    - name: fleet.service\n",
                "      command: start\n"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "etcdSRVRecord",
        "Server1ARecord",
        "Server2ARecord",
        "Server3ARecord"
      ]
    },
    "Server3": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "PrivateIpAddress": {
          "Ref": "Server3IP"
        },
        "SubnetId": {
          "Ref": "Server3Subnet"
        },
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "CoreOSClusterSG",
              "GroupId"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Server3Name"
                  },
                  ".",
                  {
                    "Ref": "DNSHostedZone"
                  }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n\n",
                "coreos:\n",
                "  etcd2:\n",
                "    name: ",
                {
                  "Ref": "Server3Name"
                },
                "\n",
                "    discovery-srv: ",
                {
                  "Ref": "DNSHostedZone"
                },
                "\n",
                "    advertise-client-urls: http://",
                {
                  "Ref": "Server3Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2379\n",
                "    initial-cluster-token: ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n    initial-cluster-state: new\n",
                "    initial-advertise-peer-urls: http://",
                {
                  "Ref": "Server3Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2380\n",
                "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
                "    listen-peer-urls: http://",
                {
                  "Ref": "Server3Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                ":2380\n",
                "  fleet:\n",
                "    metadata: \"role=services\"\n",
                "    etcd_servers: http://127.0.0.1:2379\n",
                "  units:\n",
                "    - name: etcd2.service\n",
                "      command: start\n",
                "    - name: fleet.service\n",
                "      command: start\n"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "etcdSRVRecord",
        "Server1ARecord",
        "Server2ARecord",
        "Server3ARecord"
      ]
    },
    "CoreOSClusterSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "CoreOS Cluster SecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AllowSSHFrom"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-CoreOS-SG"
                ]
              ]
            }
          }
        ]
      }
    },
    "IngressICMP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "CoreOSClusterSG",
            "GroupId"
          ]
        },
        "IpProtocol": "icmp",
        "FromPort": "8",
        "ToPort": "-1",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CoreOSClusterSG",
            "GroupId"
          ]
        }
      },
      "DependsOn": "CoreOSClusterSG"
    },
    "Ingress2379": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "CoreOSClusterSG",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "2379",
        "ToPort": "2379",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CoreOSClusterSG",
            "GroupId"
          ]
        }
      },
      "DependsOn": "CoreOSClusterSG"
    },
    "Ingress2380": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "CoreOSClusterSG",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "2380",
        "ToPort": "2380",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CoreOSClusterSG",
            "GroupId"
          ]
        }
      },
      "DependsOn": "CoreOSClusterSG"
    },
    "etcdSRVRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DNSHostedZone"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "_etcd-server._tcp.",
              {
                "Ref": "DNSHostedZone"
              },
              "."
            ]
          ]
        },
        "Type": "SRV",
        "TTL": "86400",
        "ResourceRecords": [
          {
            "Fn::Join": [
              "",
              [
                "0 0 2380 ",
                {
                  "Ref": "Server1Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                "."
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "0 0 2380 ",
                {
                  "Ref": "Server2Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                "."
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "0 0 2380 ",
                {
                  "Ref": "Server3Name"
                },
                ".",
                {
                  "Ref": "DNSHostedZone"
                },
                "."
              ]
            ]
          }
        ]
      }
    },
    "Server1ARecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DNSHostedZone"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Server1Name"
              },
              ".",
              {
                "Ref": "DNSHostedZone"
              }
            ]
          ]
        },
        "Type": "A",
        "TTL": "86400",
        "ResourceRecords": [
          {
            "Ref": "Server1IP"
          }
        ]
      }
    },
    "Server2ARecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DNSHostedZone"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Server2Name"
              },
              ".",
              {
                "Ref": "DNSHostedZone"
              },
              "."
            ]
          ]
        },
        "Type": "A",
        "TTL": "86400",
        "ResourceRecords": [
          {
            "Ref": "Server2IP"
          }
        ]
      }
    },
    "Server3ARecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DNSHostedZone"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "Server3Name"
              },
              ".",
              {
                "Ref": "DNSHostedZone"
              },
              "."
            ]
          ]
        },
        "Type": "A",
        "TTL": "86400",
        "ResourceRecords": [
          {
            "Ref": "Server3IP"
          }
        ]
      }
    },
    "CoreOSWorkerAutoScale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "CoreOSWorkerLaunchConfig"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "Server1Subnet"
          },
          {
            "Ref": "Server2Subnet"
          },
          {
            "Ref": "Server3Subnet"
          }
        ],
        "MinSize": "1",
        "MaxSize": "12",
        "DesiredCapacity": {
          "Ref": "WorkerCount"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "worker",
            "PropagateAtLaunch": true
          }
        ]
      },
      "DependsOn": [
        "Server1",
        "Server2",
        "Server3"
      ]
    },
    "CoreOSWorkerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "CoreOSClusterSG",
              "GroupId"
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n\n",
                "coreos:\n",
                "  etcd2:\n",
                "    discovery-srv: ",
                {
                  "Ref": "DNSHostedZone"
                },
                "\n",
                "    initial-cluster-state: existing\n",
                "    proxy: on\n",
                "    listen-client-urls: http://0.0.0.0:2379\n",
                "  fleet:\n",
                "    metadata: \"role=worker\"\n",
                "    etcd_servers: http://localhost:2379\n",
                "  units:\n",
                "    - name: etcd2.service\n",
                "      command: start\n",
                "    - name: fleet.service\n",
                "      command: start\n"
              ]
            ]
          }
        }
      },
      "DependsOn": [
        "Server1",
        "Server2",
        "Server3"
      ]
    }
  }
}